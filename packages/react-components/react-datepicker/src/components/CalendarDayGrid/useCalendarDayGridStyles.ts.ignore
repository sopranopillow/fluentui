import * as React from 'react';
import { getNativeElementProps, resolveShorthand, useId } from '@fluentui/react-utilities';
import {
  DateRangeType,
  DayOfWeek,
  getBoundedDateRange,
  getDateRangeArray,
  isRestrictedDate,
  useAnimateBackwards,
  useWeekCornerStyles,
  useDayRefs,
  useWeeks,
} from '../../utils';
import { useArrowNavigationGroup } from '@fluentui/react-tabster';
import { AnimationDirection } from '../Calendar/Calendar.types';
import {
  CalendarMonthHeaderRow,
  CalendarDayMonthHeaderRowProps,
} from '../CalendarMonthHeaderRow/CalendarMonthHeaderRow';
import { CalendarGridRow, CalendarGridRowProps } from '../CalendarDayGridRow/CalendarGridRow';
import type { DayInfo, CalendarDayGridProps, CalendarDayGridState, WeekCorners } from './CalendarDayGrid.types';

/**
 * Create the state required to render CalendarDayGrid.
 *
 * The returned state can be modified with hooks such as useCalendarDayGridStyles_unstable,
 * before being passed to renderCalendarDayGrid_unstable.
 *
 * @param props - props from this instance of CalendarDayGrid
 * @param ref - reference to root HTMLElement of CalendarDayGrid
 */
export const useCalendarDayGrid_unstable = (
  props: CalendarDayGridProps,
  ref: React.Ref<HTMLElement>,
): CalendarDayGridState => {
  const navigatedDayRef = React.useRef<HTMLTableCellElement>(null) as React.MutableRefObject<HTMLTableCellElement>;
  const activeDescendantId = useId();

  const onSelectDate = (selectedDate: Date): void => {
    const { firstDayOfWeek, minDate, maxDate, workWeekDays, daysToSelectInDayView, restrictedDates } = props;
    const restrictedDatesOptions = { minDate, maxDate, restrictedDates };

    let dateRange = getDateRangeArray(selectedDate, dateRangeType, firstDayOfWeek, workWeekDays, daysToSelectInDayView);
    dateRange = getBoundedDateRange(dateRange, minDate, maxDate);

    dateRange = dateRange.filter((d: Date) => {
      return !isRestrictedDate(d, restrictedDatesOptions);
    });

    props.onSelectDate?.(selectedDate, dateRange);
    props.onNavigateDate?.(selectedDate, true);
  };

  const [daysRef, getSetRefCallback] = useDayRefs();

  const weeks = useWeeks(props as CalendarDayGridProps, onSelectDate, getSetRefCallback);
  const animateBackwards = useAnimateBackwards(weeks);
  const [getWeekCornerStyles, calculateRoundedStyles] = useWeekCornerStyles(props);

  React.useImperativeHandle(props.componentRef, () => ({
    focus: () => {
      navigatedDayRef.current?.focus();
    },
  }));

  /**
   *
   * Section for setting hover/pressed styles. Because we want arbitrary blobs of days to be selectable, to support
   * highlighting every day in the month for month view, css :hover style isn't enough, so we need mouse callbacks
   * to set classnames on all relevant child refs to apply the styling
   *
   */
  const getDayInfosInRangeOfDay = (dayToCompare: DayInfo): DayInfo[] => {
    // The hover state looks weird with non-contiguous days in work week view. In work week, show week hover state
    const dateRangeHoverType = getDateRangeTypeToUse(props.dateRangeType, props.workWeekDays);

    // gets all the dates for the given date range type that are in the same date range as the given day
    const dateRange = getDateRangeArray(
      dayToCompare.originalDate,
      dateRangeHoverType,
      props.firstDayOfWeek,
      props.workWeekDays,
      props.daysToSelectInDayView,
    ).map((date: Date) => date.getTime());

    // gets all the day refs for the given dates
    const dayInfosInRange = weeks.reduce((accumulatedValue: DayInfo[], currentWeek: DayInfo[]) => {
      return accumulatedValue.concat(
        currentWeek.filter((weekDay: DayInfo) => dateRange.indexOf(weekDay.originalDate.getTime()) !== -1),
      );
    }, []);

    return dayInfosInRange;
  };

  const getRefsFromDayInfos = (dayInfosInRange: DayInfo[]): (HTMLElement | null)[] => {
    let dayRefs: (HTMLElement | null)[] = [];
    dayRefs = dayInfosInRange.map((dayInfo: DayInfo) => daysRef.current[dayInfo.key]);

    return dayRefs;
  };

  const {
    dateRangeType,
    showWeekNumbers = true,
    labelledBy,
    lightenDaysOutsideNavigatedMonth = true,
    animationDirection = AnimationDirection.Horizontal, // TODO: check default value
  } = props;

  // When the month is highlighted get the corner dates so that styles can be added to them
  const weekCorners: WeekCorners = getWeekCornerStyles(weeks!);
  const partialWeekProps = {
    weeks,
    navigatedDayRef,
    calculateRoundedStyles,
    activeDescendantId,
    weekCorners,
    getDayInfosInRangeOfDay,
    getRefsFromDayInfos,
  } as const;

  const arrowNavigationAttributes = useArrowNavigationGroup({
    axis: 'both',
    ignoreDefaultKeydown: { Enter: true, Escape: true, Tab: true },
  });

  return {
    animateBackwards,
    animationDirection,
    dateRangeType,
    lightenDaysOutsideNavigatedMonth,
    showWeekNumbers,
    middleWeeks: weeks.slice(1, weeks.length - 1),
    middleWeekProps: {
      ...partialWeekProps,
      ...props,
    },

    components: {
      root: 'tbody',
      table: 'table',
      calendarMonthHeaderRow: CalendarMonthHeaderRow as React.FC<Partial<CalendarDayMonthHeaderRowProps>>,
      firstCalendarGridRow: CalendarGridRow as React.FC<Partial<CalendarGridRowProps>>,
      lastCalendarGridRow: CalendarGridRow as React.FC<Partial<CalendarGridRowProps>>,
    },

    root: getNativeElementProps('tbody', {
      ref,
      ...props,
    }),
    table: resolveShorthand(props.table, {
      required: true,
      defaultProps: {
        'aria-multiselectable': false,
        'aria-labelledby': labelledBy,
        'aria-activedescendant': activeDescendantId,
        role: 'grid',
        ...arrowNavigationAttributes, // TODO: double check if this is okay
      },
    }),
    calendarMonthHeaderRow: resolveShorthand(props.calendarMonthHeaderRow, {
      required: true,
      defaultProps: {
        ...props,
        weeks,
      },
    }),
    firstCalendarGridRow: resolveShorthand(props.firstCalendarGridRow, {
      required: true,
      defaultProps: {
        ...props,
        ...partialWeekProps,
        week: weeks[0],
        weekIndex: -1,
        ariaRole: 'presentation',
        ariaHidden: true,
      },
    }),
    lastCalendarGridRow: resolveShorthand(props.lastCalendarGridRow, {
      required: true,
      defaultProps: {
        ...props,
        ...partialWeekProps,
        week: weeks[weeks.length - 1],
        weekIndex: -2,
        ariaRole: 'presentation',
        ariaHidden: true,
      },
    }),
  };
};

/**
 * When given work week, if the days are non-contiguous, the hover states look really weird. So for non-contiguous
 * work weeks, we'll just show week view instead.
 */
function getDateRangeTypeToUse(dateRangeType: DateRangeType, workWeekDays: DayOfWeek[] | undefined): DateRangeType {
  if (workWeekDays && dateRangeType === DateRangeType.WorkWeek) {
    const sortedWWDays = workWeekDays.slice().sort();
    let isContiguous = true;
    for (let i = 1; i < sortedWWDays.length; i++) {
      if (sortedWWDays[i] !== sortedWWDays[i - 1] + 1) {
        isContiguous = false;
        break;
      }
    }

    if (!isContiguous || workWeekDays.length === 0) {
      return DateRangeType.Week;
    }
  }

  return dateRangeType;
}

import { tokens } from '@fluentui/react-theme';
import { makeStyles, mergeClasses, shorthands } from '@griffel/react';
import {
  DateRangeType,
  DURATION_2,
  DURATION_3,
  EASING_FUNCTION_1,
  EASING_FUNCTION_2,
  FADE_IN,
  FADE_OUT,
  SLIDE_DOWN_IN20,
  SLIDE_DOWN_OUT20,
  SLIDE_LEFT_IN20,
  SLIDE_RIGHT_IN20,
  SLIDE_UP_IN20,
  SLIDE_UP_OUT20,
  TRANSITION_ROW_DISAPPEARANCE,
} from '../../utils';
import type { SlotClassNames } from '@fluentui/react-utilities';
import type { CalendarDayGridSlots, CalendarDayGridStyles, CalendarDayGridStyleProps } from './CalendarDayGrid.types';
import { AnimationDirection } from '../Calendar/Calendar.types';

export const calendarDayGridClassNames: SlotClassNames<CalendarDayGridSlots> & Record<string, string> = {
  root: 'fui-CalendarDayGrid',
  hover: 'fui-CalendarDayGrid-hover',
  pressed: 'fui-CalendarDayGrid-pressed',
  dayIsToday: 'fui-CalendarDayGrid-dayIsToday',
  daySelected: 'fui-CalendarDayGrid-daySelected',
};

const useWrapperStyles = makeStyles({
  base: {
    paddingBottom: '10px',
  },
});

const useTableStyles = makeStyles({
  base: {
    borderCollapse: 'collapse',
    borderSpacing: 0,
    fontSize: 'inherit',
    marginTop: '4px',
    paddingBottom: '10px',
    position: 'relative',
    tableLayout: 'fixed',
    textAlign: 'center',
    width: '196px',
  },
  showWeekNumbers: {
    width: '226px',
  },
});

const useDayCellStyles = makeStyles({
  base: {
    color: tokens.colorNeutralForeground1,
    cursor: 'pointer',
    fontSize: tokens.fontSizeBase200,
    fontWeight: tokens.fontWeightRegular,
    height: '28px',
    lineHeight: '28px',
    ...shorthands.margin(0),
    ...shorthands.padding(0),
    position: 'relative',
    width: '28px',

    '@media (forced-colors: active)': {
      backgroundColor: 'Window',
      color: 'WindowText',
      forcedColorAdjust: 'none',
      zIndex: 0,
    },

    [`&.${calendarDayGridClassNames.hover}`]: {
      backgroundColor: tokens.colorNeutralBackground1Hover,
      '@media (forced-colors: active)': {
        backgroundColor: 'Window',
        ...shorthands.outline('1px', 'solid', 'Highlight'),
        zIndex: 3,
      },
    },

    [`&.${calendarDayGridClassNames.pressed}`]: {
      backgroundColor: tokens.colorNeutralBackground1Pressed,
      '@media (forced-colors: active)': {
        backgroundColor: 'Window',
        ...shorthands.borderColor('Highlight'),
        color: 'Highlight',
      },
    },

    [`&.${calendarDayGridClassNames.pressed}.${calendarDayGridClassNames.hover}`]: {
      '@media (forced-colors: active)': {
        backgroundColor: 'Window',
        ...shorthands.outline('1px', 'solid', 'Highlight'),
      },
    },
  },
  // getFocusStyle(theme, { inset: -3 }),
});

const useDaySelectedStyles = makeStyles({
  dateRangeTypeNotMonth: {
    backgroundColor: tokens.colorNeutralBackground1Selected,

    '&::before': {
      bottom: 0,
      content: '""',
      left: 0,
      position: 'absolute',
      right: 0,
      top: 0,
    },

    [`&:hover, &.${calendarDayGridClassNames.hover}, &.${calendarDayGridClassNames.pressed}`]: {
      backgroundColor: tokens.colorNeutralBackground1Selected + ' !important',
      '@media (forced-colors: active)': {
        backgroundColor: 'Highlight!important',
        color: 'HighlightText!important',
      },
    },

    '@media (forced-colors: active)': {
      backgroundColor: 'Highlight!important',
      ...shorthands.borderColor('Highlight!important'),
      color: 'HighlightText!important',
      forcedColorAdjust: 'none',
    },
  },
});

const useWeekRowStyles = makeStyles({
  base: {
    animationDuration: DURATION_3,
    animationFillMode: 'both',
    animationTimingFunction: EASING_FUNCTION_1,
  },
  horizontalBackward: {
    animationName: [FADE_IN, SLIDE_RIGHT_IN20],
  },
  horizontalForward: {
    animationName: [FADE_IN, SLIDE_LEFT_IN20],
  },
  verticalBackward: {
    animationName: [FADE_IN, SLIDE_DOWN_IN20],
  },
  verticalForward: {
    animationName: [FADE_IN, SLIDE_UP_IN20],
  },
});

const useWeekDayLabelCellStyles = makeStyles({
  base: {
    animationDuration: DURATION_2,
    animationFillMode: 'both',
    animationName: FADE_IN,
    animationTimingFunction: EASING_FUNCTION_2,
  },
});

const useWeekNumberCellStyles = makeStyles({
  base: {
    backgroundColor: tokens.colorNeutralBackground2,
    ...shorthands.borderColor(tokens.colorNeutralStroke2),
    ...shorthands.borderRight('1px', 'solid'),
    boxSizing: 'border-box',
    color: tokens.colorNeutralForeground2,
    fontSize: tokens.fontSizeBase200,
    fontWeight: tokens.fontWeightRegular,
    height: '28px',
    ...shorthands.margin(0),
    ...shorthands.padding(0),
    width: '28px',
  },
});

const useDayOutsideBoundsStyles = makeStyles({
  base: {
    '&, &:disabled, & button': {
      color: tokens.colorNeutralForegroundDisabled,
      pointerEvents: 'none',
    },
  },
});

const useDayOutsideNavigatedMonthStyles = makeStyles({
  lightenDaysOutsideNavigatedMonth: {
    color: tokens.colorNeutralForeground4,
    fontWeight: tokens.fontWeightRegular,
  },
});

const useDayButtonStyles = makeStyles({
  base: {
    backgroundColor: tokens.colorTransparentBackground,
    ...shorthands.borderRadius('2px'),
    ...shorthands.borderStyle('none'),
    color: 'inherit',
    cursor: 'pointer',
    fontSize: tokens.fontSizeBase200,
    fontWeight: 'inherit',
    height: '24px',
    lineHeight: '24px',
    ...shorthands.overflow('visible'),
    ...shorthands.padding(0),
    width: '24px',

    '&span': {
      height: 'inherit',
      lineHeight: 'inherit',
    },
  },
});

const useDayIsTodayStyles = makeStyles({
  base: {
    backgroundColor: tokens.colorBrandBackground + '!important',
    ...shorthands.borderRadius('100%'),
    color: tokens.colorNeutralForegroundOnBrand + '!important',
    fontWeight: tokens.fontWeightSemibold + '!important',

    '@media (forced-colors: active)': {
      backgroundColor: 'WindowText!important',
      ...shorthands.borderColor('WindowText!important'),
      color: 'WindowText!important',
      forcedColorAdjust: 'none',
    },
  },
});

const useFirstTransitionWeekStyles = makeStyles({
  base: {
    height: 0,
    opacity: 0,
    ...shorthands.overflow('hidden'),
    position: 'absolute',
    width: 0,
  },
  verticalForward: {
    animationDuration: DURATION_3,
    animationFillMode: 'both',
    animationName: [FADE_OUT, SLIDE_UP_OUT20, TRANSITION_ROW_DISAPPEARANCE],
    animationTimingFunction: EASING_FUNCTION_1,
  },
});

const useLastTransitionWeekStyles = makeStyles({
  base: {
    height: 0,
    marginTop: '-28px',
    opacity: 0,
    ...shorthands.overflow('hidden'),
    position: 'absolute',
    width: 0,
  },
  verticalBackward: {
    animationDuration: DURATION_3,
    animationFillMode: 'both',
    animationName: [FADE_OUT, SLIDE_DOWN_OUT20, TRANSITION_ROW_DISAPPEARANCE],
    animationTimingFunction: EASING_FUNCTION_1,
  },
});

const useDayMarkerStyles = makeStyles({
  base: {
    // TODO: Use background instead of foreground token
    backgroundColor: tokens.colorNeutralForeground2,
    ...shorthands.borderRadius('100%'),
    bottom: '1px',
    height: '4px',
    left: 0,
    ...shorthands.margin('auto'),
    position: 'absolute',
    right: 0,
    width: '4px',

    '@media (forced-colors: active)': {
      backgroundColor: 'WindowText',
      forcedColorAdjust: 'none',
    },

    [`&.${calendarDayGridClassNames.dayIsToday}`]: {
      backgroundColor: tokens.colorNeutralBackground1,
      '@media (forced-colors: active)': {
        backgroundColor: 'Window',
      },
    },

    [`&.${calendarDayGridClassNames.daySelected}`]: {
      '@media (forced-colors: active)': {
        backgroundColor: 'HighlightText',
      },
    },
  },
});

const useCornerDateStyles = makeStyles({
  topRight: {
    borderTopRightRadius: '2px',
  },
  topLeft: {
    borderTopLeftRadius: '2px',
  },
  bottomRight: {
    borderBottomRightRadius: '2px',
  },
  bottomLeft: {
    borderBottomLeftRadius: '2px',
  },
});

const useDatesPositionStyles = makeStyles({
  above: {
    '&::before': {
      ...shorthands.borderTop('1px', 'solid', tokens.colorNeutralStrokeAccessible),
    },
  },
  below: {
    '&::before': {
      ...shorthands.borderBottom('1px', 'solid', tokens.colorNeutralStrokeAccessible),
    },
  },
  left: {
    '&::before': {
      ...shorthands.borderLeft('1px', 'solid', tokens.colorNeutralStrokeAccessible),
    },
  },
  right: {
    '&::before': {
      ...shorthands.borderRight('1px', 'solid', tokens.colorNeutralStrokeAccessible),
    },
  },
});

/**
 * Apply styling to the CalendarDayGrid slots based on the state
 */
export const useCalendarDayGridStyles_unstable = (
  props: CalendarDayGridStyleProps,
): Record<keyof CalendarDayGridStyles, string> => {
  const wrapperStyles = useWrapperStyles();
  const tableStyles = useTableStyles();
  const dayCellStyles = useDayCellStyles();
  const daySelectedStyles = useDaySelectedStyles();
  const weekRowStyles = useWeekRowStyles();
  const weekDayLabelCellStyles = useWeekDayLabelCellStyles();
  const weekNumberCellStyles = useWeekNumberCellStyles();
  const dayOutsideBoundsStyles = useDayOutsideBoundsStyles();
  const dayOutsideNavigatedMonthStyles = useDayOutsideNavigatedMonthStyles();
  const dayButtonStyles = useDayButtonStyles();
  const dayIsTodayStyles = useDayIsTodayStyles();
  const firstTransitionWeekStyles = useFirstTransitionWeekStyles();
  const lastTransitionWeekStyles = useLastTransitionWeekStyles();
  const dayMarkerStyles = useDayMarkerStyles();
  const cornerDateStyles = useCornerDateStyles();
  const datesPositionStyles = useDatesPositionStyles();

  const {
    animateBackwards,
    animationDirection,
    dateRangeType,
    lightenDaysOutsideNavigatedMonth,
    showWeekNumbers,
  } = props;

  return {
    wrapper: wrapperStyles.base,
    table: mergeClasses(tableStyles.base, showWeekNumbers && tableStyles.showWeekNumbers),
    dayCell: dayCellStyles.base,
    daySelected: dateRangeType !== DateRangeType.Month ? daySelectedStyles.dateRangeTypeNotMonth : '',
    weekRow: mergeClasses(
      animateBackwards !== undefined && weekRowStyles.base,
      animateBackwards !== undefined &&
        (animationDirection === AnimationDirection.Horizontal
          ? animateBackwards
            ? weekRowStyles.horizontalBackward
            : weekRowStyles.horizontalForward
          : animateBackwards
          ? weekRowStyles.verticalBackward
          : weekRowStyles.verticalForward),
    ),
    weekDayLabelCell: weekDayLabelCellStyles.base,
    weekNumberCell: weekNumberCellStyles.base,
    dayOutsideBounds: dayOutsideBoundsStyles.base,
    dayOutsideNavigatedMonth: lightenDaysOutsideNavigatedMonth
      ? dayOutsideNavigatedMonthStyles.lightenDaysOutsideNavigatedMonth
      : '',
    dayButton: dayButtonStyles.base,
    dayIsToday: dayIsTodayStyles.base,
    firstTransitionWeek: mergeClasses(
      firstTransitionWeekStyles.base,
      animateBackwards !== undefined &&
        animationDirection !== AnimationDirection.Horizontal &&
        !animateBackwards &&
        firstTransitionWeekStyles.verticalForward,
    ),
    lastTransitionWeek: mergeClasses(
      lastTransitionWeekStyles.base,
      animateBackwards !== undefined &&
        animationDirection !== AnimationDirection.Horizontal &&
        animateBackwards &&
        lastTransitionWeekStyles.verticalBackward,
    ),
    dayMarker: dayMarkerStyles.base,
    topRightCornerDate: cornerDateStyles.topRight,
    topLeftCornerDate: cornerDateStyles.topLeft,
    bottomRightCornerDate: cornerDateStyles.bottomRight,
    bottomLeftCornerDate: cornerDateStyles.bottomLeft,
    datesAbove: datesPositionStyles.above,
    datesBelow: datesPositionStyles.below,
    datesLeft: datesPositionStyles.left,
    datesRight: datesPositionStyles.right,
  };
};
